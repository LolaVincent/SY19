demo()
demo(graphics)
q
q
e
q
q
q()
library(Rcmdr)
q()
q()
q()
getwd()
setwd(dir="/home/lola/Documents/SY19/TP4")
roc_curve_reg<-roc(as.numeric(test$g), as.vector(pred.g))
plot(roc_curve_reg, col='red')
library(pROC)
roc_curve_reg<-roc(test$g, as.vector(pred.g))
source("phomene_ACP_AFD.R")
#Régression logistique :
library(pROC)
app = as.data.frame(phoneme.train[,2:258])
test = phoneme.test[,2:258]
glm.g <- glmnet(as.matrix(phoneme.trainquant), app$g, family="multinomial")
pred.g <- predict(glm.g, newx = as.matrix(phoneme.testquant), type = "class") # je ne comprend pas ce que ça renvoie, matrice 1503*100
perf.g <- table(test$g, pred.g) # problème car matrices n'ont pas les mêmes dimensions
(sum(perf.g)-sum(diag(perf.g)))/ntest
roc_curve_reg<-roc(test$g, as.vector(pred.g))
plot(roc_curve_reg, col='red')
library("glmnet", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
glm.g <- glmnet(as.matrix(phoneme.trainquant), app$g, family="multinomial")
pred.g <- predict(glm.g, newx = as.matrix(phoneme.testquant), type = "class") # je ne comprend pas ce que ça renvoie, matrice 1503*100
perf.g <- table(test$g, pred.g) # problème car matrices n'ont pas les mêmes dimensions
glm.g2 <- cv.glmnet(as.matrix(phoneme.trainquant), app$g, family="multinomial") #cross-validation
pred.g2 <- predict(glm.g2, newx = as.matrix(phoneme.testquant), type = "class")
perf.g2 <- table(test$g, pred.g2)
(sum(perf.g2)-sum(diag(perf.g2)))/ntest # 7,5% d'erreur
roc_curve_reg<-roc(test$g, as.vector(pred.g2))
plot(roc_curve_reg, col='red')
roc_curve_reg<-roc(as.numeric(test$g), as.vector(as.numeric(pred.g2)))
as.numeric(test$g)
as.vector(as.numeric(pred.g2))
as.numeric(pred.g2)
pred.g2
test$g
as.numeric(pred.g2)
as.vector(pred.g2)
roc_curve_reg<-roc(as.numeric(test$g), as.vector(pred.g2))
pred?g2
pred.g2
as.factor(pred.g2)
as.numeric(as.factor(pred.g2))
roc_curve_reg<-roc(as.numeric(test$g), as.numeric(as.factor(pred.g2)))
plot(roc_curve_reg, col='red')
roc_curve_reg<-roc(as.numeric(test$g), as.numeric(as.factor(pred.g2)))
plot(roc_curve_reg, col='red')
roc_curve_reg<-roc(as.numeric(test$g), as.numeric(as.factor(pred.g2)))
plot(roc_curve_reg, col='red')
auc(roc_curve_reg)
lda.g <- lda(as.matrix(as.numeric(app$g))~ ., data = app)
library(lda)
library("MASS", lib.loc="/usr/lib/R/library")
lda.g <- lda(as.matrix(as.numeric(app$g))~ ., data = app)
glm.g.acp <- cv.glmnet(as.matrix(acp.train), app$g, family="multinomial")
nrow(acp.train)
glm.g.acp <- cv.glmnet(as.matrix(acp.train), app$g, family="multinomial")
acp#ACP :
acp.train <- princomp(phoneme.trainquant) #Prétraitement --> réduction variables
acp.test <- princomp(phoneme.testquant)
glm.g.acp <- cv.glmnet(as.matrix(acp.train), app$g, family="multinomial")
norw(acp.train)
norw(acp.train$scores)
glm.g.acp <- cv.glmnet(as.matrix(acp.train$scores), app$g, family="multinomial")
pred.g.acp <- predict(glm.g.acp, newx = as.matrix(acp.test$scores), type = "class")
perf.g <- table(test$g, pred.g.acp)
perf.g.acp <- table(test$g, pred.g.acp)
perf.g.acp
(sum(perf.g.acp)-sum(diag(perf.g.acp)))/ntest
Z
library(MASS)
lda.phoneme<-lda(phoneme.train[,258]~. ,data=phoneme.trainquant)
U <- lda.phoneme$scaling
X <- as.matrix(phoneme.trainquant)
Z <- X%*%U
lda.phonemetest<-lda(phoneme.test[,258]~. ,data=phoneme.testquant)
Utest <- lda.phonemetest$scaling
Xtest <- as.matrix(phoneme.testquant)
Ztest <- Xtest%*%Utest
Z
glm.g.afd <- cv.glmnet(Z, phoneme.train[,258], family="multinomial")
pred.g.afd <- predict(glm.g.afd, newx = Ztest, type = "class")
perf.g.afd <- table(phoneme.test[,258], pred.g.afd)
(sum(perf.g.afd)-sum(diag(perf.g.afd)))/ntest
glm.g.acf <- cv.glmnet(Z2, phoneme.train[,258], family="multinomial")
lda.phoneme2<-lda(phoneme.train[,258]~. ,data=as.data.frame(acp.train$scores[,1:5]))
U2 <- lda.phoneme2$scaling
X2 <- as.matrix(acp.train$scores[,1:5])
Z2 <- X2%*%U2
lda.phonemetest2<-lda(phoneme.test[,258]~. ,data=as.data.frame(acp.test$scores[,1:5]))
Utest2 <- lda.phonemetest2$scaling
Xtest2 <- as.matrix(acp.test$scores[,1:5])
Ztest2 <- Xtest2%*%Utest2
glm.g.acf <- cv.glmnet(Z2, phoneme.train[,258], family="multinomial")
pred.g.acf <- predict(glm.g.acf, newx = Ztest2, type = "class")
perf.g.acf <- table(phoneme.test[,258], pred.g.acf)
(sum(perf.g.acf)-sum(diag(perf.g.acf)))/ntest
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source("phoneme_ACP_AFD.R")
source("phomene_ACP_AFD.R")
source('~/Documents/SY19/TP4/Phoneme/ADL.R')
source("phomene_ACP_AFD.R")
source("phomene_ACP_AFD.R")
glm.g.acf <- cv.glmnet(Z2, phoneme.train[,258], family="multinomial")
source("phoneme_data.R")
source("phoneme_data.R")
source("phomene_ACP_AFD.R")
lda.g <- lda(as.matrix(as.numeric(app$g))~ ., data = app)
lda.g <- lda(as.matrix(as.numeric(phoneme.train[,258]))~ ., data = phoneme.trainquant)
pred.lda <- predict(lda.g,newdata=phoneme.testquant)
perf.lda <- table(as.numeric(phoneme.test[,258]), pred.lda$class)
(sum(perf.lda)-sum(diag(perf.lda)))/nrow(test)
lda.g.acp <- lda(as.matrix(as.numeric(phoneme.train[,258]))~ ., data = acp.train$scores)
lda.g.acp <- lda(as.matrix(as.numeric(phoneme.train[,258]))~ ., data = as.matrix(acp.train$scores))
glm.g.acp <- cv.glmnet(as.matrix(acp.train$scores), app$g, family="multinomial")
q
acp.train
acp.train$scores
glm.g.acp <- cv.glmnet(acp.train$scores, app$g, family="multinomial")
lda.g.acp <- lda(as.matrix(as.numeric(phoneme.train[,258]))~ ., data = acp.train$scores)
lda.g.acp <- lda(as.matrix(as.numeric(phoneme.train[,258]))~ ., data = as.matrix(acp.train$scores))
lda.g.acp <- lda(as.matrix(as.numeric(phoneme.train[,258]))~ ., data = as.data.frame(acp.train$scores))
pred.lda <- predict(lda.g, newdata=acp.test$scores)
pred.lda <- predict(lda.g, newdata=as.data.frame(acp.test$scores))
pred.lda.acp <- predict(lda.g.acp, newdata=as.data.frame(acp.test$scores))
perf.lda.acp <- table(as.numeric(phoneme.test[,258]), pred.lda.acp$class)
perf.lda
perf.lda.acp
(sum(perf.lda.acp)-sum(diag(perf.lda.acp)))/nrow(test)
lda.g <- lda(as.matrix(as.numeric(phoneme.train[,258]))~ ., data = phoneme.trainquant)
pred.lda <- predict(lda.g,newdata=phoneme.testquant)
perf.lda <- table(as.numeric(phoneme.test[,258]), pred.lda$class)
(sum(perf.lda)-sum(diag(perf.lda)))/nrow(test)
pred.g.acp <- predict(glm.g.acp, newx = as.matrix(acp.test$scores), type = "class")
perf.g.acp <- table(phoneme.test[,258], pred.g.acp)
(sum(perf.g.acp)-sum(diag(perf.g.acp)))/ntest
source('~/.active-rstudio-document')
reg<- lm(phoneme.train[,258] ~ phoneme.testquant, data=phoneme.train)
reg<- lm(phoneme.train[,258] ~ as.matrix(phoneme.testquant), data=phoneme.train)
reg<- lm(phoneme.train[,258] ~ as.matrix(phoneme.trainquant), data=phoneme.train)
reg<- lm(as.numeric(phoneme.train[,258]) ~ as.matrix(phoneme.trainquant), data=phoneme.train)
pred.lda <- predict(reg, int="c", newdata=phoneme.testquant)
?lm.predict
pred.lda <- predict(reg, int="c", newdata=as.matrix(phoneme.testquant))
pred.lda <- predict(reg, int="c", newdata=as.data.frame(phoneme.testquant))
pred.lda <- predict(reg, int="p", newdata=as.data.frame(phoneme.testquant))
?lm
reg<- lm(as.numeric(phoneme.train[,258]) ~ phoneme.trainquant, data=as.data.frame(phoneme.train))
reg<- lm(as.numeric(phoneme.train[,258]) ~ as.data.frame(phoneme.trainquant), data=as.data.frame(phoneme.train))
reg<- lm(as.numeric(phoneme.train[,258]) ~ as.matrix(phoneme.trainquant), data=as.data.frame(phoneme.train))
pred.lda <- predict(reg, int="p", newdata=as.data.frame(phoneme.testquant))
pred.lda
summary(pred.lda)
reg<- lm(phoneme.train[,258] ~ as.matrix(phoneme.trainquant), data=as.data.frame(phoneme.train))
pred.lda <- predict(reg, int="p", newdata=as.data.frame(phoneme.testquant))
pred.lda
reg<- lm(as.numeric(phoneme.train[,258]) ~ as.matrix(phoneme.trainquant), data=as.data.frame(phoneme.train))
pred.lda <- predict(reg, int="p", newdata=as.data.frame(phoneme.testquant))
pred.lda$class
pred.lda
lda.g <- lda(as.matrix(as.numeric(phoneme.train[,258]))~ ., data = phoneme.trainquant)
pred.lda <- predict(lda.g,newdata=phoneme.testquant)
perf.lda <- table(as.numeric(phoneme.test[,258]), pred.lda$class)
(sum(perf.lda)-sum(diag(perf.lda)))/nrow(test)
reg<- lm(as.numeric(phoneme.train[,258]) ~ as.matrix(phoneme.trainquant), data=as.data.frame(phoneme.train))
regl <- lm(as.numeric(phoneme.train[,258]) ~ as.matrix(phoneme.trainquant), data=as.data.frame(phoneme.train))
pred.regl <- predict(regl, int="p", newdata=as.data.frame(phoneme.testquant))
perf.regl <- table(as.numeric(phoneme.test[,258]), pred.regl$class)
pred.regl$class
?predict
?lm
regl <- lm(as.numeric(phoneme.train[,258]) ~ as.matrix(phoneme.trainquant), data=as.data.frame(phoneme.train))
pred.regl <- predict(regl, int="p", newdata=as.data.frame(phoneme.testquant))
nrow(phoneme.testquant)
nrow(regl)
regl
regl <- lm(as.numeric(phoneme.train[,258]) ~ phoneme.trainquant, data=as.data.frame(phoneme.train))
regl <- lm(as.numeric(phoneme.train[,258]) ~ phoneme.train, data=as.data.frame(phoneme.train))
regl <- lm(as.numeric(phoneme.train[,258]) ~ as.matrix(phoneme.train), data=as.data.frame(phoneme.train))
regl <- lm(as.numeric(phoneme.train[,258]) ~ as.matrix(phoneme.trainquant), data=as.data.frame(phoneme.train))
pred.regl <- predict(regl, int="p", newdata=as.data.frame(phoneme.testquant))
perf.regl <- table(as.numeric(phoneme.test[,258]), pred.regl$class)
pred.regl <- predict(regl, int="p", newdata=as.data.frame(phoneme.testquant))
pred.regl.fit
pred.regl
pred.regl.fit
pred.regl$fit
summary(pred.regl)
pred.regl <- predict(regl, int="p", newdata=as.data.frame(phoneme.testquant))
regl <- lm(as.numeric(phoneme.train[,258]) ~ as.matrix(phoneme.trainquant))
pred.regl <- predict(regl, int="p", newdata=as.data.frame(phoneme.testquant))
pred.regl <- predict(regl, newdata=as.data.frame(phoneme.testquant))
regl <- lm(g ~ ., data=app )
regl <- lm(as.numeric(g) ~ ., data=app )
pred.regl <- predict(regl, int="p", newdata=test)
perf.regl <- table(as.numeric(phoneme.test[,258]), pred.regl$class)
pred.regl
pred.regl$class
pred.lda
head(pred.lda)
head(pred.lda)
head(pred.lda$fit)
head(pred.lda$class)
head(pred.regl)
pred.regl$fit
pred.regl[fit]
pred.regl[,1]
head(pred.regl)
head(pred.regl[,1])
head(fitted(regl))
perf.regl <- table(as.numeric(phoneme.test[,258]), pred.regl[,1]>2.5)
perf.regl
(sum(perf.regl[1:2,1]) + sum(perf.regl[3:5,2]) )/nrow(test)
(sum(perf.regl[1:2,2]) + sum(perf.regl[3:5,1]) )/nrow(test)
perf.regl <- table(as.numeric(phoneme.test[,258]), pred.regl[,1])
perf.regl
plot(regl)
plot(regl)
qnorm(regl)
qnorm(resid(regl))
qqnorm(resid(regl))
plot(phoneme.testclass, rstandard(reg))
#Récupération des données :
phoneme <- read.table("phoneme.data", sep = ",", header = TRUE)
#Ensembles de test/apprentissage
n <- nrow(phoneme)
ntrain <- floor(2/3*n)
ntest <- n - ntrain
dtrain <- sample(1:n, ntrain)
phoneme.train <- phoneme[dtrain,]
phoneme.test <- phoneme[-dtrain,]
phoneme.trainquant <- phoneme.train[,2:257]
phoneme.testquant <- phoneme.test[,2:257]
phoneme.trainclass <- phoneme.train[,258]
phoneme.testclass <- phoneme.test[,258]
app = as.data.frame(phoneme.train[,2:258])
test = phoneme.test[,2:258]
plot(phoneme.testclass, rstandard(regl))
regl <- lm(as.numeric(phoneme.trainclass) ~ as.matrix(phoneme.trainquant))
pred.regl <- predict(regl, int="p", newdata=as.data.frame(phoneme.testquant))
regl <- lm(as.numeric(phoneme.train[,258]) ~ as.matrix(phoneme.trainquant))
pred.regl <- predict(regl, int="p", newdata=as.data.frame(phoneme.testquant))
regl <- lm(as.numeric(phoneme.train[,258]) ~ as.matrix(phoneme.trainquant))
pred.regl <- predict(regl, int="p", newdata=as.data.frame(phoneme.testquant))
pred.regl
plot(phoneme.testclass, rstandard(regl))
qqnorm(resid(regl))
qqline(resid(regl))
hist(hatvalues(reg))
hist(cooks.distance(reg))
hist(hatvalues(regl))
hist(cooks.distance(regl))
hist(cooks.distance(reg))
hist(hatvalues(regl))
plot(phoneme.testclass, resid(regl))
plot(phoneme.testclass, regl)
source('~/Documents/SY19/TP4/Breast Cancer/data.R')
head(breastcan <- read.table("r_breast_cancer.data", sep = ",", header = TRUE)
summary(breastcan)
n <- nrow(breastcan)
ntrain <- floor(2/3*n)
ntest <- n - ntrain
train <- sample(1:n, ntrain)
train <- breastcan[dtrain,]
test <- breastcan[-dtrain,]
traindata <- train[,1:32]
testdata <- test[,1:32]
traintime <- train[,33]
testtime <- test[,33])
breastcan <- read.table("r_breast_cancer.data", sep = ",", header = TRUE)
summary(breastcan)
n <- nrow(breastcan)
ntrain <- floor(2/3*n)
ntest <- n - ntrain
train <- sample(1:n, ntrain)
train <- breastcan[dtrain,]
test <- breastcan[-dtrain,]
traindata <- train[,1:32]
testdata <- test[,1:32]
traintime <- train[,33]
testtime <- test[,33]
breastcan <- read.table("r_breast_cancer.data", sep = ",", header = TRUE)
summary(breastcan)
breastcan <- read.table("r_breast_cancer.data", sep = ",", header = TRUE)
setwd(dir="Breast Cancer")
setwd(dir="/home/lola/Documents/SY19/TP4/Breast Cancer")
breastcan <- read.table("r_breast_cancer.data", sep = ",", header = TRUE)
summary(breastcan)
n <- nrow(breastcan)
ntrain <- floor(2/3*n)
ntest <- n - ntrain
train <- sample(1:n, ntrain)
train <- breastcan[dtrain,]
test <- breastcan[-dtrain,]
traindata <- train[,1:32]
testdata <- test[,1:32]
traintime <- train[,33]
testtime <- test[,33]
head(train)
dtrain <- sample(1:n, ntrain)
train <- breastcan[dtrain,]
test <- breastcan[-dtrain,]
head(train)
cv.out<-cv.glmnet(traindata, traintime, alpha=0)
cv.out<-cv.glmnet(as.matrix(traindata), as.matrix(traintime), alpha=0)
traindata
traindata <- train[,1:32]
testdata <- test[,1:32]
traintime <- train[,33]
testtime <- test[,33]
cv.out<-cv.glmnet(as.matrix(traindata), as.matrix(traintime), alpha=0)
plot(cv.out)
fit<-glmnet(as.matrix(traindata), as.matrix(traintime),lambda=cv.out$lambda.min,alpha=0)
ridge.pred<-predict(fit,s=cv.out$lambda.min,newx=testtime)
ridge.pred<-predict(fit,s=cv.out$lambda.min,newx=as.matrix(testtime))
ridge.pred<-predict(fit, s=cv.out$lambda.min, newx=as.matrix(testtime))
ridge.pred<-predict(fit, s=cv.out$lambda.min, newx=as.data.frame(testtime))
fit<-glmnet(as.matrix(traindata), as.matrix(traintime), lambda=cv.out$lambda.min, alpha=0)
ridge.pred<-predict(fit, s=cv.out$lambda.min, newx=as.data.frame(testtime))
?predict.ridge
?predict.glmnet
head(testtime)
ridge.pred<-predict(fit, s=cv.out$lambda.min, newx=as.matrix(testtime))
cv.out$lambda.min
nrow(testtime)
nrow(as.matrix(testtime))
ncol(as.matrix(testtime))
ridge.pred<-predict(fit, s=cv.out$lambda.min, newx=as.matrix(testdata))
print(mean((ytst-ridge.pred)ˆ2))
mean((as.matrix(testtime)-ridge.pred)ˆ2)
mean(as.matrix(testtime)-ridge.pred)
mean((as.matrix(testtime)-ridge.pred)^2)
cv.out.lasso<-cv.glmnet(as.matrix(traindata), as.matrix(traintime), alpha=1)
plot(cv.out)
fit.lasso<-glmnet(as.matrix(traindata), as.matrix(traintime), lambda=cv.out.lasso$lambda.min, alpha=0)
lasso.pred<-predict(fit.lasso,s=cv.out.lasso$lambda.min,newx=as.matrix(testdata))
mean((as.matrix(testtime)-lasso.pred)^2)
cv.out<-cv.glmnet(as.matrix(traindata), as.matrix(traintime), alpha=0)
plot(cv.out)
fit<-glmnet(as.matrix(traindata), as.matrix(traintime), lambda=cv.out$lambda.min, alpha=0)
ridge.pred<-predict(fit, s=cv.out$lambda.min, newx=as.matrix(testdata))
mean((as.matrix(testtime)-ridge.pred)^2)
cv.out<-cv.glmnet(as.matrix(traindata), as.matrix(traintime), alpha=0)
plot(cv.out)
fit<-glmnet(as.matrix(traindata), as.matrix(traintime), lambda=cv.out$lambda.min, alpha=0)
ridge.pred<-predict(fit, s=cv.out$lambda.min, newx=as.matrix(testdata))
mean((as.matrix(testtime)-ridge.pred)^2)
cv.out.lasso<-cv.glmnet(as.matrix(traindata), as.matrix(traintime), alpha=1)
plot(cv.out)
fit.lasso<-glmnet(as.matrix(traindata), as.matrix(traintime), lambda=cv.out.lasso$lambda.min, alpha=0)
lasso.pred<-predict(fit.lasso,s=cv.out.lasso$lambda.min,newx=as.matrix(testdata))
mean((as.matrix(testtime)-lasso.pred)^2)
cv.out.lasso<-cv.glmnet(as.matrix(traindata), as.matrix(traintime), alpha=1)
plot(cv.out)
fit.lasso<-glmnet(as.matrix(traindata), as.matrix(traintime), lambda=cv.out.lasso$lambda.min, alpha=0)
lasso.pred<-predict(fit.lasso,s=cv.out.lasso$lambda.min,newx=as.matrix(testdata))
mean((as.matrix(testtime)-lasso.pred)^2)
plot(cv.out)
cv.out.ridge <-cv.glmnet(as.matrix(traindata), as.matrix(traintime), alpha=0)
plot(cv.out.ridge)
fit<-glmnet(as.matrix(traindata), as.matrix(traintime), lambda=cv.out$lambda.min, alpha=0)
ridge.pred<-predict(fit, s=cv.out$lambda.min, newx=as.matrix(testdata))
mean((as.matrix(testtime)-ridge.pred)^2)  # 930.566
library(pls)
pcr.fit <- pcr(as.matrix(traindata), as.matrix(traintime), scale=TRUE, validation="CV")
install.packages("pls")
library("pls", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
pcr.fit <- pcr(as.matrix(traindata), as.matrix(traintime), scale=TRUE, validation="CV")
pcr.fit <- pcr(as.matrix(traindata), scale=TRUE, validation="CV")
pcr.fit <- pcr(breastcan ~ breastcan[,1:32], scale=TRUE, validation="CV")
pcr.fit <- pcr(as.matrix(breastcan) ~ as.matrix(breastcan[,1:32]), scale=TRUE, validation="CV")
?pcr
summary(pcr.fit)
validationplot(pcr.fit, val.type = "MSEP", legendpos = "topright")
validationplot(pcr.fit, val.type = "MSEP", legendpos = "topright")
acp.train <- princomp(traindata)acp.train <- princomp(traindata) #Prétraitement --> réduction variables
acp.test <- princomp(testdata)
acp.train <- princomp(traindata) #Prétraitement --> réduction variables
acp.test <- princomp(testdata)
plot(acp.train$scores, pch=16, col=palette()[traintime])
plot(acp.train$scores[,c(2,3)], pch=16, col=palette()[traintime])
abline(h=0, v=0)
lda.cancer<-lda(traintime~.traindata ,data=train)
U <- lda.cancer$scaling
X <- as.matrix(traindata)
Z <- X%*%U
lda.cancer<-lda(traintime~.datatrain, data=train)
lda.cancer<-lda(traintime~traindata, data=train)
lda.cancer<-lda(traintime~as.matrix(traindata), data=train)
U <- lda.cancer$scaling
X <- as.matrix(traindata)
Z <- X%*%U
lda.cancertest<-lda(testtime~as.matrix(testdata) ,data=test)
Utest <- lda.cancertest$scaling
Xtest <- as.matrix(testdata)
Ztest <- Xtest%*%Utest
library(’splines’)
install.packages("splines2")
library("splines2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
cv.out.ridge <-cv.glmnet(as.matrix(traindata), as.matrix(traintime), alpha=0)
plot(cv.out.ridge)
fit.ridge<-glmnet(as.matrix(traindata), as.matrix(traintime), lambda=cv.out$lambda.min, alpha=0)
ridge.pred<-predict(fit.ridge, s=cv.out$lambda.min, newx=as.matrix(testdata))
mean((as.matrix(testtime)-ridge.pred)^2)
fit.pcr <- pcr(as.matrix(breastcan) ~ as.matrix(breastcan[,1:32]), scale=TRUE, validation="CV")
summary(fit.pcr)
validationplot(fit.pcr, val.type = "MSEP", legendpos = "topright")
fit.pcr <- pcr(as.matrix(breastcan[,33]) ~ as.matrix(breastcan[,1:32]), scale=TRUE, validation="CV")
summary(fit.pcr)
validationplot(fit.pcr, val.type = "MSEP", legendpos = "topright")
fit.pcr <- pcr(as.matrix(breastcan[,33]) ~ as.matrix(breastcan[,1:32]), scale=TRUE, validation="CV")
summary(fit.pcr)
validationplot(fit.pcr, val.type = "MSEP", legendpos = "topright")
fit.pcr <- pcr(as.matrix(traintime) ~ as.matrix(traindata), scale=TRUE, validation="CV")
summary(fit.pcr)
fit.pcr$scores
fit.pcr.test <- pcr(as.matrix(testtime) ~ as.matrix(testdata), scale=TRUE, validation="CV")
summary(fit.pcr.test)
validationplot(fit.pcr.test, val.type = "MSEP", legendpos = "topright")
fit.pcr.train <- pcr(as.matrix(traintime) ~ as.matrix(traindata), scale=TRUE, validation="CV")
summary(fit.pcr.train)
validationplot(fit.pcr.train, val.type = "MSEP", legendpos = "topright")
fit.pcr.train
fit.pcr.train$scores
nrow(fit.pcr.train$scores)
nrow(train)
ncol(traindata)
ncol(fit.pcr.train$scores)
cv.out.ridge <-cv.glmnet(as.matrix(traindata), as.matrix(traintime), alpha=0)
plot(cv.out.ridge)
fit.ridge<-glmnet(as.matrix(traindata), as.matrix(traintime), lambda=cv.out.ridge$lambda.min, alpha=0)
ridge.pred<-predict(fit.ridge, s=cv.out.ridge$lambda.min, newx=as.matrix(testdata))
mean((as.matrix(testtime)-ridge.pred)^2)
cv.out.ridge.cpr <- cv.glmnet(as.matrix(fit.pcr.train), as.matrix(traintime), alpha=0)
cv.out.ridge.cpr <- cv.glmnet(as.matrix(fit.pcr.train$scores), as.matrix(traintime), alpha=0)
plot(cv.out.ridge.cpr)
fit.ridge.cpr <- glmnet(as.matrix(fit.pcr.train$scores), as.matrix(traintime), lambda=cv.out.ridge.cpr$lambda.min, alpha=0)
ridge.pred.cpr <-predict(fit.ridge.cpr, s=cv.out.ridge.cpr$lambda.min, newx=as.matrix(fit.pcr.test$scores))
mean((as.matrix(testtime)-ridge.pred.cpr)^2)
