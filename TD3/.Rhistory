app <- data[10001:n,]
app <- as.data.frame(app)
lda.app <- lda(app[,4]~., data=app)
pred.lda<-predict(lda.app,newdata=test)
perf <-table(test[,4],pred.lda$class)
1-sum(diag(perf))/ntst
}
}
nvalues <- c(30, 100, 1000, 10000)
for (j in 1:length(nvalues)) {
n <- nvalues[j] + 100000
print(n)
data <- matrix(0, nrow=n, ncol=4)
class <- rbinom(n, 1, 0.5)
for (i in 1:length(class)){
if (class[i] ==0){
print(class[i])
l <- mvrnorm(1, mu2, sig2)
}
else {
print(class[i])
l<-mvrnorm(1, mu1, sig1)
}
data[i,] <- c(l, class[i])
print(data[i,])
test <- data[1:10000,]
app <- data[10001:n,]
app <- as.data.frame(app)
lda.app <- lda(app[,4]~., data=app)
pred.lda<-predict(lda.app,newdata=test)
perf <-table(test[,4],pred.lda$class)
1-sum(diag(perf))/ntst
}
}
length(class)
nvalues <- c(30, 100, 1000, 10000)
for (j in 1:length(nvalues)) {
n <- nvalues[j] + 100000
print(n)
data <- matrix(0, nrow=n, ncol=4)
class <- rbinom(n, 1, 0.5)
for (i in 1:length(class)){
if (class[i] ==0){
print(class[i])
l <- mvrnorm(1, mu2, sig2)
}
else {
print(class[i])
l<-mvrnorm(1, mu1, sig1)
}
data[i,] <- c(l, class[i])
print(data[i,])
}
test <- data[1:10000,]
app <- data[10001:n,]
app <- as.data.frame(app)
lda.app <- lda(app[,4]~., data=app)
pred.lda<-predict(lda.app,newdata=test)
perf <-table(test[,4],pred.lda$class)
1-sum(diag(perf))/ntst
}
app[,4]
lda.app <- lda(app[,4]~., data=app)
lda.app <- lda(app[,4]~app[,1]+app[,2]+app[,3])
pred.lda<-predict(lda.app,newdata=test)
test <- as.data.frame
pred.lda<-predict(lda.app,newdata=test)
pred.lda<-predict(lda.app,newdata=test)
test <- as.data.frame(test)
pred.lda<-predict(lda.app,newdata=test)
test
lda.app
pred.lda<-predict(lda.app, newdata=test)
?predict
pred.lda<-predict(lda.app)
pred.lda
head(pred.lda)
pred.lda$class
perf <-table(test[,4],pred.lda$class)
test[,4]
test$4
head(test)
test
head(app)
test <- data[1:10000,]
app <- data[10001:n,]
app <- as.data.frame(app)
test <- as.data.frame(test)
test
head(test)
test$V4
nrow(test)
lda.app <- lda(app[,4]~app[,1]+app[,2]+app[,3])
pred.lda <- predict(lda.app, newdata=test)
perf <-table(test$V4,pred.lda$class)
1-sum(diag(perf))/1000
nrow(lda.spam)
pred.lda
perf
table(test$V4,pred.lda$class)
pred.lda$class
nrow(pred.lda$class)
nrow(as.matrix(pred.lda$class)
)
perf <-table(test$V4, as.matrix(pred.lda$class))
nrow(test$V4)
nrow(as.matrix(test$V4))
test <- data[1:10000,]
app <- data[10001:n,]
app <- as.data.frame(app)
lda.app <- lda(app[,4]~app[,1]+app[,2]+app[,3])
pred.lda <- predict(lda.app, newdata=test)
pred.lda <- predict(lda.app, newdata=as.data.frame(test))
summarise(pred.lda)
summary(pred.lda)
norw(app)
nrow(app)
lda.app <- lda(app[,4]~app[,1]+app[,2]+app[,3], data=app)
lda.app <- lda(app[,4]~., data=app)
lda.app <- lda(app[,4]~app[,1]+app[,2]+app[,3], data=app)
pred.lda <- predict(lda.app, newdata=as.data.frame(test))
nrow(app <- spam[train,])
nrow(test <- spam[-train,])
lda.spam
nrow(lda.spam)
lda.app
test
library(MASS)
pi1 <- 0.5
pi2 <- 0.5
mu1 <- matrix(0, nrow=3)
mu2 <- matrix(1, nrow=3)
sig1 <- matrix(0, nrow=3, ncol=3)
diag(sig1) <-  c(1, 1,1)
sig2 <- 0.8*sig1
nvalues <- c(30, 100, 1000, 10000)
for (j in 1:length(nvalues)) {
n <- nvalues[j] + 100000
data <- matrix(0, nrow=n, ncol=4)
class <- rbinom(n, 1, 0.5)
for (i in 1:length(class)){
if (class[i] ==0){
l <- mvrnorm(1, mu2, sig2)
}
else {
l<-mvrnorm(1, mu1, sig1)
}
data[i,] <- c(l, class[i])
}
test <- data[1:10000,]
app <- data[10001:n,]
app <- as.data.frame(app)
lda.app <- lda(app[,4]~app[,1]+app[,2]+app[,3], data=app)
pred.lda <- predict(lda.app, newdata=as.data.frame(test))
perf <-table(test$V4, as.matrix(pred.lda$class))
1-sum(diag(perf))/1000
}
test
nrow(test)
nrow(app)
library(MASS)
pi1 <- 0.5
pi2 <- 0.5
mu1 <- matrix(0, nrow=3)
mu2 <- matrix(1, nrow=3)
sig1 <- matrix(0, nrow=3, ncol=3)
diag(sig1) <-  c(1, 1,1)
sig2 <- 0.8*sig1
nvalues <- c(30, 100, 1000, 10000)
for (j in 1:length(nvalues)) {
n <- nvalues[j] + 100000
data <- matrix(0, nrow=n, ncol=4)
class <- rbinom(n, 1, 0.5)
for (i in 1:length(class)){
if (class[i] ==0){
l <- mvrnorm(1, mu2, sig2)
}
else {
l<-mvrnorm(1, mu1, sig1)
}
data[i,] <- c(l, class[i])
}
test <- data[1:10000,]
app <- data[10001:n,]
app <- as.data.frame(app)
lda.app <- lda(app[,4]~app[,1]+app[,2]+app[,3], data=app)
pred.lda <- predict(lda.app, newdata=as.data.frame(test))
perf <-table(test$V4, as.matrix(pred.lda$class))
1-sum(diag(perf))/1000
}
library(MASS)
pi1 <- 0.5
pi2 <- 0.5
mu1 <- matrix(0, nrow=3)
mu2 <- matrix(1, nrow=3)
sig1 <- matrix(0, nrow=3, ncol=3)
diag(sig1) <-  c(1, 1,1)
sig2 <- 0.8*sig1
nvalues <- c(30, 100, 1000, 10000)
for (j in 1:length(nvalues)) {
n <- nvalues[j] + 10000
data <- matrix(0, nrow=n, ncol=4)
class <- rbinom(n, 1, 0.5)
for (i in 1:length(class)){
if (class[i] ==0){
l <- mvrnorm(1, mu2, sig2)
}
else {
l<-mvrnorm(1, mu1, sig1)
}
data[i,] <- c(l, class[i])
}
test <- data[1:10000,]
app <- data[10001:n,]
app <- as.data.frame(app)
lda.app <- lda(app[,4]~app[,1]+app[,2]+app[,3], data=app)
pred.lda <- predict(lda.app, newdata=as.data.frame(test))
perf <-table(test$V4, as.matrix(pred.lda$class))
1-sum(diag(perf))/1000
}
pred.lda
nrow(pred.lda$class)
test$V4
test[,V4]
test[,4]
test[,4]
perf <-table(test[,4], as.matrix(pred.lda$class))
nrow(test[,4])
nrow(as.matrix(test[,4]))
nrow(pred.lda$class)
nrow(as.matrix(pred.lda$class))
pred.spam<-predict(lda.spam,newdata=test)
perf <-table(test$V58,pred.spam$class)
n <- 4601
napp <- 3067
train<-sample(1:n,napp)
app <- spam[train,]
app <- as.data.frame(app)
test <- spam[-train,]
ntst <- nrow(test)
library(MASS)
lda.spam<- lda(V58~., data=app)
pred.spam<-predict(lda.spam,newdata=test)
perf <-table(test$V58,pred.spam$class)
1-sum(diag(perf))/ntst
nrow(pred.spam)
n <- 4601
napp <- 3067
train<-sample(1:n,napp)
app <- spam[train,]
app <- as.data.frame(app)
test <- spam[-train,]
ntst <- nrow(test)
library(MASS)
lda.spam<- lda(V58~., data=app)
pred.spam<-predict(lda.spam,newdata=test)
perf <-table(test$V58,pred.spam$class)
1-sum(diag(perf))/ntst
library(MASS)
pi1 <- 0.5
pi2 <- 0.5
mu1 <- matrix(0, nrow=3)
mu2 <- matrix(1, nrow=3)
sig1 <- matrix(0, nrow=3, ncol=3)
diag(sig1) <-  c(1, 1,1)
sig2 <- 0.8*sig1
nvalues <- c(30, 100, 1000, 10000)
for (j in 1:length(nvalues)) {
n <- nvalues[j] + 10000
data <- matrix(0, nrow=n, ncol=4)
class <- rbinom(n, 1, 0.5)
for (i in 1:length(class)){
if (class[i] ==0){
l <- mvrnorm(1, mu2, sig2)
}
else {
l<-mvrnorm(1, mu1, sig1)
}
data[i,] <- c(l, class[i])
}
test <- data[1:10000,]
app <- data[10001:n,]
app <- as.data.frame(app)
lda.app <- lda(app[,4]~app[,1]+app[,2]+app[,3], data=app)
pred.lda <- predict(lda.app, newdata=as.data.frame(test))
perf <-table(test[,4], as.matrix(pred.lda$class))
1-sum(diag(perf))/1000
}
app
test
nrow(test)
lda.app <- lda(app[,4]~app[,1]+app[,2]+app[,3])
pred.lda <- predict(lda.app, newdata=as.data.frame(test))
app <- data[1:10000,]
test <- data[10001:n,]
app <- as.data.frame(app)
lda.app <- lda(app[,4]~app[,1]+app[,2]+app[,3])
pred.lda <- predict(lda.app, newdata=as.data.frame(test))
lda.app
lda.app <- lda(app[,4]~app[,1]+app[,2]+app[,3], data=app)
pred.lda <- predict(lda.app, newdata=test)
test <- as.data.frame(test)
pred.lda <- predict(lda.app, newdata=test)
test <- data[1:10000,]
app <- data[10001:n,]
app <- as.data.frame(app)
lda.app <- lda(app[,4]~app[,1]+app[,2]+app[,3], data=app)
pred.lda <- predict(lda.app, newdata=test)
lda.app
V58
app$V58
spam$V58
app
app$V4
lda.app(V4~., data=app)
lda(V4~., data=app)
lda.app <- lda(V4~. , data=app)
pred.lda <- predict(lda.app, newdata=test)
test <- as.data.frame(test)
test
predict(lda.app, newdata=test)
pred.lda <- predict(lda.app, newdata=test)
perf <-table(test[,4], as.matrix(pred.lda$class))
perf <-table(test$V4, pred.lda$class)
perf
nrow(test$V4)
4425+545+1791+3239
1-sum(diag(perf))/10000
erreur <- matrix(0, nrow=4, ncol=2)
erreur[j,1] <- 1-sum(diag(perf))/10000
erreur[1 1]
erreur[1,1]
erreur[j,1] <- 1-sum(diag(perf))/10000*100
erreur[1,1]
erreur[j,1] <- (1-sum(diag(perf))/10000)*100
erreur[1,1]
qda.app <- qda(V4~. , data=app)
pred.qda <- predict(qda.app, newdata=test)
perf.qda <-table(test$V4, pred.qda$class)
erreur[j,1] <- (1-sum(diag(perf.lda))/10000)*100
erreur[j,2] <- (1-sum(diag(perf.qda))/10000)*100
perf.lda <-table(test$V4, pred.lda$class)
erreur[j,1] <- (1-sum(diag(perf.lda))/10000)*100
erreur[j,2] <- (1-sum(diag(perf.qda))/10000)*100
erreur
library(MASS)
pi1 <- 0.5
pi2 <- 0.5
mu1 <- matrix(0, nrow=3)
mu2 <- matrix(1, nrow=3)
sig1 <- matrix(0, nrow=3, ncol=3)
diag(sig1) <-  c(1, 1,1)
sig2 <- 0.8*sig1
nvalues <- c(30, 100, 1000, 10000)
erreur <- matrix(0, nrow=4, ncol=2)
for (j in 1:length(nvalues)) {
n <- nvalues[j] + 10000
data <- matrix(0, nrow=n, ncol=4)
class <- rbinom(n, 1, 0.5)
for (i in 1:length(class)){
if (class[i] ==0){
l <- mvrnorm(1, mu2, sig2)
}
else {
l<-mvrnorm(1, mu1, sig1)
}
data[i,] <- c(l, class[i])
}
test <- data[1:10000,]
app <- data[10001:n,]
app <- as.data.frame(app)
test <- as.data.frame(test)
lda.app <- lda(V4~. , data=app)
pred.lda <- predict(lda.app, newdata=test)
perf.lda <-table(test$V4, pred.lda$class)
qda.app <- qda(V4~. , data=app)
pred.qda <- predict(qda.app, newdata=test)
perf.qda <-table(test$V4, pred.qda$class)
erreur[j,1] <- (1-sum(diag(perf.lda))/10000)*100
erreur[j,2] <- (1-sum(diag(perf.qda))/10000)*100
}
erreur
erreur
library(MASS)
pi1 <- 0.5
pi2 <- 0.5
mu1 <- matrix(0, nrow=3)
mu2 <- matrix(1, nrow=3)
sig1 <- matrix(0, nrow=3, ncol=3)
diag(sig1) <-  c(1, 1,1)
sig2 <- 0.8*sig1
nvalues <- c(30, 100, 1000, 10000)
erreur <- matrix(0, nrow=4, ncol=2)
for (j in 1:length(nvalues)) {
n <- nvalues[j] + 10000
data <- matrix(0, nrow=n, ncol=4)
class <- rbinom(n, 1, 0.5)
for (i in 1:length(class)){
if (class[i] ==0){
l <- mvrnorm(1, mu2, sig2)
}
else {
l<-mvrnorm(1, mu1, sig1)
}
data[i,] <- c(l, class[i])
}
test <- data[1:10000,]
app <- data[10001:n,]
app <- as.data.frame(app)
test <- as.data.frame(test)
lda.app <- lda(V4~. , data=app)
pred.lda <- predict(lda.app, newdata=test)
perf.lda <-table(test$V4, pred.lda$class)
qda.app <- qda(V4~. , data=app)
pred.qda <- predict(qda.app, newdata=test)
perf.qda <-table(test$V4, pred.qda$class)
erreur[j,1] <- (1-sum(diag(perf.lda))/10000)*100
erreur[j,2] <- (1-sum(diag(perf.qda))/10000)*100
erreur
}
library(MASS)
pi1 <- 0.5
pi2 <- 0.5
mu1 <- matrix(0, nrow=3)
mu2 <- matrix(1, nrow=3)
sig1 <- matrix(0, nrow=3, ncol=3)
diag(sig1) <-  c(1, 1,1)
sig2 <- 0.8*sig1
nvalues <- c(30, 100, 1000, 10000)
erreur <- matrix(0, nrow=4, ncol=2)
for (j in 1:length(nvalues)) {
n <- nvalues[j] + 10000
data <- matrix(0, nrow=n, ncol=4)
class <- rbinom(n, 1, 0.5)
for (i in 1:length(class)){
if (class[i] ==0){
l <- mvrnorm(1, mu2, sig2)
}
else {
l<-mvrnorm(1, mu1, sig1)
}
data[i,] <- c(l, class[i])
}
test <- data[1:10000,]
app <- data[10001:n,]
app <- as.data.frame(app)
test <- as.data.frame(test)
lda.app <- lda(V4~. , data=app)
pred.lda <- predict(lda.app, newdata=test)
perf.lda <-table(test$V4, pred.lda$class)
qda.app <- qda(V4~. , data=app)
pred.qda <- predict(qda.app, newdata=test)
perf.qda <-table(test$V4, pred.qda$class)
erreur[j,1] <- (1-sum(diag(perf.lda))/10000)*100
erreur[j,2] <- (1-sum(diag(perf.qda))/10000)*100
erreur
}
erreur
plot(erreur)
plot(erreur[,1])
plot(erreur[,1], 'l')
plot(erreur[,1], l)
plot(erreur[,1], style='l")
plot(erreur[,1], style='l')
plot(erreur[,1])
?plot
plot(erreur[,1], type="l")
plot(erreur[,2], type="l", col="red", add=TRUE)
plot(erreur[,1], type="l")
plot(erreur[,2], type="l", col="red", add=TRUE)
plot(erreur[,1], erreur[,2], type="l", col="red")
plot(erreur[,1], type="l", col="red")
erreur
library(MASS)
pi1 <- 0.5
pi2 <- 0.5
mu1 <- matrix(0, nrow=3)
mu2 <- matrix(1, nrow=3)
sig1 <- matrix(0, nrow=3, ncol=3)
diag(sig1) <-  c(1, 1,1)
sig2 <- 0.8*sig1
nvalues <- c(30, 100, 1000, 10000)
erreur <- matrix(0, nrow=4, ncol=2)
for (j in 1:length(nvalues)) {
n <- nvalues[j] + 10000
print(n)
data <- matrix(0, nrow=n, ncol=4)
class <- rbinom(n, 1, 0.5)
for (i in 1:length(class)){
if (class[i] ==0){
l <- mvrnorm(1, mu2, sig2)
}
else {
l<-mvrnorm(1, mu1, sig1)
}
data[i,] <- c(l, class[i])
}
test <- data[1:10000,]
app <- data[10001:n,]
app <- as.data.frame(app)
test <- as.data.frame(test)
lda.app <- lda(V4~. , data=app)
pred.lda <- predict(lda.app, newdata=test)
perf.lda <-table(test$V4, pred.lda$class)
qda.app <- qda(V4~. , data=app)
pred.qda <- predict(qda.app, newdata=test)
perf.qda <-table(test$V4, pred.qda$class)
erreur[j,1] <- (1-sum(diag(perf.lda))/10000)*100
erreur[j,2] <- (1-sum(diag(perf.qda))/10000)*100
}
erreur
# grosse différence pour les petits échantillons d'apprentissage (mieux adq) mais après plus vraiment de différence
